% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/query.R
\name{query_documents}
\alias{query_documents}
\alias{query_documents.cosmos_container}
\title{Query an Azure Cosmos DB container}
\usage{
query_documents(container, ...)

\method{query_documents}{cosmos_container}(
  container,
  query,
  parameters = list(),
  cross_partition = TRUE,
  partition_key = NULL,
  by_physical_partition = FALSE,
  as_data_frame = TRUE,
  metadata = TRUE,
  headers = list(),
  ...
)
}
\arguments{
\item{container}{A Cosmos DB container object, as obtained by \code{get_cosmos_container} or \code{create_cosmos_container}.}

\item{query}{A string containing the query text.}

\item{parameters}{A named list of parameters to pass to a parameterised query, if required.}

\item{cross_partition, partition_key, by_physical_partition}{Arguments that control how to handle cross-partition queries. See 'Details' below.}

\item{as_data_frame}{Whether to return the query result as a data frame, or a list of Cosmos DB document objects.}

\item{metadata}{Whether to include Cosmos DB document metadata in the query result.}

\item{headers, ...}{Optional arguments passed to lower-level functions.}
}
\description{
Query an Azure Cosmos DB container
}
\details{
This is the primary function for querying the contents of a Cosmos DB container (table). The \code{query} argument should contain the text of a SQL query, optionally parameterised. if the query contains parameters, pass them in the \code{parameters} argument as a named list.

Cosmos DB is a partitioned key-value store under the hood, with documents stored in separate physical databases according to their value of the partition key. AzureCosmosR has limited support for cross-partition queries: basic SELECTs should work, but aggregates and more complex queries may require some hand-hacking.

The default \code{cross_partition=TRUE} runs the query for all partition key values and then attempts to stitch the results together. To run the query for only one key value, set \code{cross_partition=FALSE} and \code{partition_key} to the desired value. You can obtain all the values of the key with the \link{list_key_values} function.

The \code{by_physical_partition} argument allows running the query separately across all \emph{physical} partitions. A physical partition contains the documents for one or more key values. You can set this to TRUE to run a query that fails when run across partitions; the returned object will be a list containing the individual query results from each physical partition.

As an alternative to AzureCosmosR, you can also use the ODBC protocol to interface with the SQL API. By instaling a suitable ODBC driver, you can then talk to Cosmos DB in a manner similar to any SQL database. An advantage of the ODBC interface is that it fully supports cross-partition queries, which AzureCosmosR currently only partially supports. A disadvantage is that it does not support nested document fields; such fields will be flattened into a string.
}
\seealso{
\link{cosmos_container}, \link{cosmos_document}, \link{list_key_values}
}
